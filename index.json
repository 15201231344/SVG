{
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing to SVG.NET | SVG.NET API",
    "keywords": "Contributing to SVG.NET SVG.NET is a community project and lives from contributions by the community. Any help to improve and evolve the library is very welcome! Contributions may include bug reports, bug fixes, new features, infrastructure enhancements, or documentation updates. How to contribute Reporting Bugs If you found a bug in SVG.NET, you can create an issue . If you are able to build the library locally, please check, if the problem still exists in the master branch before filing the bug. If you can reproduce the problem, please provide enough information so that it can be reproduced by other developers. This includes: The Operating System The used .NET / .NET Core version An example image that shows the incorrect behavior, or a respective code snippet (preferably in the form of a failing unit test) The stack trace in case of an unexpected exception For better readability, you may use markdown code formatting for any included code. Proposing Enhancements If you need a specific feature that is not yet implemented, you can also create a respective issue. Of course - implementing it yourself is the best chance to get it done! Contributing Code The preferred workflow for contributing code is to fork the repository on GitHub, clone it, develop on a feature branch, and create a pull request when done. There are a few things to consider for contributing code: Please use the same coding style as in the rest of the code Use spaces instead of tabs Provide unit tests for bug fixes, or provide a test svg with a respective png counterpart showing the correct rendering (refer to existing test images for naming conventions) Provide meaningful commit messages and/or PR comments Check that the automatic tests on AppVeyor all pass for your pull request Be ready to adapt your changes after a code review Contributing Documentation This projects is in need of documentation - any help to add documentation infrastructure, inline documentation, how-tos or sample code is appreciated! For specifics, please refer to the issue related to documentation . Thanks for taking the time to contribute to SVG.NET!"
  },
  "README.html": {
    "href": "README.html",
    "title": "SVG.NET | SVG.NET API",
    "keywords": "SVG.NET Public fork of the C# SVG rendering library on codeplex: https://svg.codeplex.com/ This started out as a minor modification to enable the writing of proper SVG strings. But now after almost two years we have so many fixes and improvements that we decided to share our current codebase to the public in order to improve it even further. So please feel free to fork it and open pull requests for any fix, improvement or feature you add. You may check the contributing guide for more information on how to do this. For instructions on how to install and use the library, please check the Getting Started guide. Changes in the latest released versions and in master you can find in the Release notes . Projects using the library vvvv a hybrid visual/textual live-programming environment for easy prototyping and development. Posh a windowing/interaction/drawing layer for C#/.NET desktop applications with their GUI in a browser. Timeliner a Posh based timeline that can be controlled by and sends out its values via OSC. Chordious a fretboard diagram generator for fretted stringed instruments. If you want your project in this list, send me a pull request on this file or link + short description to tebjan (at) vvvv.org"
  }
}